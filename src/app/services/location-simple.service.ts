// src/app/services/location-simple.service.ts - OPTIMIZADO PARA M√ìVIL

import { Injectable, signal } from '@angular/core';

export interface UserLocationSimple {
  latitude: number;
  longitude: number;
  city: string;
  detected: boolean;
  accuracy?: number; // ‚Üê NUEVO: precisi√≥n en metros
  source?: string;   // ‚Üê NUEVO: GPS, WiFi, etc.
}

@Injectable({
  providedIn: 'root'
})
export class LocationSimpleService {
  
  private currentLocation = signal<UserLocationSimple | null>(null);
  
  get location() {
    return this.currentLocation.asReadonly();
  }

  /**
   * üì± Obtener ubicaci√≥n optimizada para m√≥vil
   */
  async getUserLocation(): Promise<UserLocationSimple> {
    try {
      console.log('üìç Obteniendo ubicaci√≥n GPS (m√≥vil optimizado)...');
      
      // üîÑ SIEMPRE pedir ubicaci√≥n nueva (no cach√©)
      const position = await this.getCurrentPositionMobile();
      
      console.log('‚úÖ Ubicaci√≥n GPS obtenida:', {
        lat: position.latitude,
        lon: position.longitude,
        accuracy: position.accuracy
      });
      
      // Detectar ciudad
      const city = this.detectCityFromCoords(position.latitude, position.longitude);
      
      const location: UserLocationSimple = {
        latitude: position.latitude,
        longitude: position.longitude,
        city,
        detected: true,
        accuracy: position.accuracy,
        source: position.accuracy < 100 ? 'GPS' : 'WiFi/Cell'
      };
      
      this.currentLocation.set(location);
      console.log('‚úÖ Ubicaci√≥n actualizada:', location);
      return location;
      
    } catch (error) {
      console.log('‚ö†Ô∏è Error geolocation, usando Barcelona por defecto');
      console.log('Error details:', error);
      
      const fallback: UserLocationSimple = {
        latitude: 41.3851,
        longitude: 2.1734,
        city: 'Barcelona',
        detected: false,
        source: 'Default'
      };
      
      this.currentLocation.set(fallback);
      return fallback;
    }
  }

  /**
   * üì± Geolocation optimizada para m√≥vil
   */
  private getCurrentPositionMobile(): Promise<{
    latitude: number, 
    longitude: number, 
    accuracy: number
  }> {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocation not supported'));
        return;
      }

      // üéØ CONFIGURACI√ìN OPTIMIZADA PARA M√ìVIL
      const options = {
        enableHighAccuracy: true,    // Usar GPS si est√° disponible
        timeout: 15000,              // 15 segundos timeout (m√≥vil puede tardar)
        maximumAge: 300000                // NO usar cach√© - siempre ubicaci√≥n fresca
      };

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log(`üì° GPS fix obtenido - Precisi√≥n: ${position.coords.accuracy}m`);
          resolve({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            accuracy: position.coords.accuracy
          });
        },
        (error) => {
          console.log('‚ùå Error GPS:', error.message);
          
          // üîÑ RETRY con configuraci√≥n menos exigente
          const fallbackOptions = {
            enableHighAccuracy: false,  // Usar WiFi/Cell si GPS falla
            timeout: 10000,
            maximumAge: 300000          // Permitir cach√© de 5 min
          };
          
          navigator.geolocation.getCurrentPosition(
            (position) => {
              console.log(`üì∂ Ubicaci√≥n aproximada obtenida - Precisi√≥n: ${position.coords.accuracy}m`);
              resolve({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                accuracy: position.coords.accuracy
              });
            },
            reject,
            fallbackOptions
          );
        },
        options
      );
    });
  }

  /**
   * üèôÔ∏è Detectar ciudad por coordenadas (expandida)
   */
  private detectCityFromCoords(lat: number, lon: number): string {
    // Barcelona √°rea
    if (lat >= 41.2 && lat <= 41.5 && lon >= 1.9 && lon <= 2.3) {
      return 'Barcelona';
    }
    // Madrid √°rea  
    if (lat >= 40.2 && lat <= 40.6 && lon >= -3.9 && lon <= -3.5) {
      return 'Madrid';
    }
    // Valencia √°rea
    if (lat >= 39.4 && lat <= 39.6 && lon >= -0.5 && lon <= -0.3) {
      return 'Valencia';
    }
    // Cartagena √°rea (¬°para ti!)
    if (lat >= 37.5 && lat <= 37.7 && lon >= -1.0 && lon <= -0.8) {
      return 'Cartagena';
    }
    // Monterrey √°rea
    if (lat >= 25.5 && lat <= 26.0 && lon >= -100.5 && lon <= -100.0) {
      return 'Monterrey';
    }
    
    return `Lat: ${lat.toFixed(2)}, Lon: ${lon.toFixed(2)}`;
  }

  /**
   * üîÑ Forzar actualizaci√≥n de ubicaci√≥n
   */
  async forceLocationUpdate(): Promise<UserLocationSimple> {
    console.log('üîÑ Forzando actualizaci√≥n de ubicaci√≥n...');
    return this.getUserLocation();
  }
}